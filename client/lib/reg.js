// === 边界: 只匹配位置 === //
// === 零宽度断言: 不匹配字符而是匹配字符之间的位置 === //
// === ^: 匹配开头位置 === //
// === $: 匹配结尾位置 === //
// === \b: 匹配单词边界 === //
/*

123fsd3;24325.435,fdffdas`2324

1的前面位置
3与;之间的位置
;与2之间的位置
5与.之间的位置
.与4之间的位置
5与,之间的位置
,与f之间的位置
s与`之间的位置
`与2之间的位置
4的后面位置

*/
// === \B: 除了\b匹配到的位置 === //

// === 环视: 是一种非捕获分组, 根据某个模式之前或之后的内容来匹配其它模式(方向: 后 ---> 前) === //
// === 1 正前瞻: 匹配单词abc, 且紧随后的单词为fg --- abc(?=fg)  === //
// === 2 反前瞻: 匹配单词abc, 且紧随后的单词不为fg --- abc(?!fg) === //
// === 3 正后顾: 匹配单词fg, 且前面为abc --- (?<=fg)abc  === //
// === 4 反后顾: 匹配单词fg, 且前面不为abc --- (?<!fg)abc === //

export default {
  date: /^\d{4}-(?:0[1-9]|1[12])-(?:0[1-9]|[12][1-9]|3[01])\s(?:[01][0-9]|2[0-3])\:[0-6][0-9]\:[0-5][0-9]$/,
  phone: /^1(3|5|8)\d{9}$/,
  mail: /^[\w\W]+?@\w+?\.(?:com|cn)$/,
  num: /^\d*$/,
  legal: /[^\*\\\/\?\"\'\+\^]/,

  // 1 通过 \B: 先匹配每个除了\b外的边界
  // 2 通过 \B(?=(\d{3}): 边界后面紧跟着3个数字
  // 3 通过 \B(?=(\d{3})(?!\d)): 3个数字后面不能再为数字
  // 4 通过 + : 这样的边界在全局匹配多份
  num2money: /\B(?=(\d{3})+(?!\d))/g,
}
